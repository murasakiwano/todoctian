// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Defines values for TaskStatus.
var (
	UnknownTaskStatus = TaskStatus{}

	TaskStatusCompleted = TaskStatus{"completed"}

	TaskStatusPending = TaskStatus{"pending"}
)

// Project defines model for Project.
type Project struct {
	// The creation date of the project.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Unique identifier for the project.
	ID *string `json:"id,omitempty"`

	// Name of the project.
	Name *string `json:"name,omitempty"`
}

// Task defines model for Task.
type Task struct {
	// The creation date of the task.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Unique identifier for the task.
	ID *string `json:"id,omitempty"`

	// Name of the task.
	Name *string `json:"name,omitempty"`

	// ID of the parent task, if it exists.
	ParentTaskID *string `json:"parentTaskID,omitempty"`

	// ID of the project the task belongs to.
	ProjectID *string `json:"projectID,omitempty"`

	// The current status of the task.
	Status *TaskStatus `json:"status,omitempty"`

	// A list of the IDs for the task's subtasks.
	SubtaskIDS []string `json:"subtaskIDs,omitempty"`
}

// The current status of the task.
type TaskStatus struct {
	value string
}

func (t *TaskStatus) ToValue() string {
	return t.value
}

func (t TaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t *TaskStatus) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}

func (t *TaskStatus) FromValue(value string) error {
	switch value {

	case TaskStatusCompleted.value:
		t.value = value
		return nil

	case TaskStatusPending.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// PostProjectsJSONBody defines parameters for PostProjects.
type PostProjectsJSONBody Project

// PatchProjectsProjectIDJSONBody defines parameters for PatchProjectsProjectID.
type PatchProjectsProjectIDJSONBody struct {
	// The new name for the project.
	Name *string `json:"name,omitempty"`
}

// PostTasksJSONBody defines parameters for PostTasks.
type PostTasksJSONBody Task

// PatchTasksTaskIDStatusJSONBody defines parameters for PatchTasksTaskIDStatus.
type PatchTasksTaskIDStatusJSONBody struct {
	Status *PatchTasksTaskIDStatusJSONBodyStatus `json:"status,omitempty"`
}

// PatchTasksTaskIDStatusJSONBodyStatus defines parameters for PatchTasksTaskIDStatus.
type PatchTasksTaskIDStatusJSONBodyStatus string

// PostProjectsJSONRequestBody defines body for PostProjects for application/json ContentType.
type PostProjectsJSONRequestBody PostProjectsJSONBody

// Bind implements render.Binder.
func (PostProjectsJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PatchProjectsProjectIDJSONRequestBody defines body for PatchProjectsProjectID for application/json ContentType.
type PatchProjectsProjectIDJSONRequestBody PatchProjectsProjectIDJSONBody

// Bind implements render.Binder.
func (PatchProjectsProjectIDJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody PostTasksJSONBody

// Bind implements render.Binder.
func (PostTasksJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PatchTasksTaskIDStatusJSONRequestBody defines body for PatchTasksTaskIDStatus for application/json ContentType.
type PatchTasksTaskIDStatusJSONRequestBody PatchTasksTaskIDStatusJSONBody

// Bind implements render.Binder.
func (PatchTasksTaskIDStatusJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// GetProjectsJSON200Response is a constructor method for a GetProjects response.
// A *Response is returned with the configured status code and content type from the spec.
func GetProjectsJSON200Response(body []Project) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostProjectsJSON201Response is a constructor method for a PostProjects response.
// A *Response is returned with the configured status code and content type from the spec.
func PostProjectsJSON201Response(body Project) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// GetProjectsProjectIDJSON200Response is a constructor method for a GetProjectsProjectID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetProjectsProjectIDJSON200Response(body Project) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PatchProjectsProjectIDJSON200Response is a constructor method for a PatchProjectsProjectID response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchProjectsProjectIDJSON200Response(body Project) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetProjectsProjectIDTasksJSON200Response is a constructor method for a GetProjectsProjectIDTasks response.
// A *Response is returned with the configured status code and content type from the spec.
func GetProjectsProjectIDTasksJSON200Response(body []Task) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetTasksJSON200Response is a constructor method for a GetTasks response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTasksJSON200Response(body []Task) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostTasksJSON201Response is a constructor method for a PostTasks response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTasksJSON201Response(body Task) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostTasksJSON404Response is a constructor method for a PostTasks response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTasksJSON404Response(body Task) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetTasksTaskIDJSON200Response is a constructor method for a GetTasksTaskID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTasksTaskIDJSON200Response(body Task) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all projects
	// (GET /projects)
	GetProjects(w http.ResponseWriter, r *http.Request) *Response
	// Create a project.
	// (POST /projects)
	PostProjects(w http.ResponseWriter, r *http.Request) *Response
	// Delete a project. Also deletes the project's tasks.
	// (DELETE /projects/{projectID})
	DeleteProjectsProjectID(w http.ResponseWriter, r *http.Request, projectID string) *Response
	// Get a single project
	// (GET /projects/{projectID})
	GetProjectsProjectID(w http.ResponseWriter, r *http.Request, projectID string) *Response
	// Rename a project
	// (PATCH /projects/{projectID})
	PatchProjectsProjectID(w http.ResponseWriter, r *http.Request, projectID string) *Response
	// Get all project's tasks.
	// (GET /projects/{projectID}/tasks)
	GetProjectsProjectIDTasks(w http.ResponseWriter, r *http.Request, projectID string) *Response
	// Get all tasks
	// (GET /tasks)
	GetTasks(w http.ResponseWriter, r *http.Request) *Response
	// Create a new task.
	// (POST /tasks)
	PostTasks(w http.ResponseWriter, r *http.Request) *Response
	// Delete a task.
	// (DELETE /tasks/{taskID})
	DeleteTasksTaskID(w http.ResponseWriter, r *http.Request, taskID string) *Response
	// Get a single task.
	// (GET /tasks/{taskID})
	GetTasksTaskID(w http.ResponseWriter, r *http.Request, taskID string) *Response
	// Update a task's status.
	// (PATCH /tasks/{taskID}/status)
	PatchTasksTaskIDStatus(w http.ResponseWriter, r *http.Request, taskID string) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetProjects(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostProjects operation middleware
func (siw *ServerInterfaceWrapper) PostProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostProjects(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteProjectsProjectID operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectsProjectID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "projectID" -------------
	var projectID string

	if err := runtime.BindStyledParameter("simple", false, "projectID", chi.URLParam(r, "projectID"), &projectID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "projectID"})
		return
	}

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteProjectsProjectID(w, r, projectID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetProjectsProjectID operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "projectID" -------------
	var projectID string

	if err := runtime.BindStyledParameter("simple", false, "projectID", chi.URLParam(r, "projectID"), &projectID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "projectID"})
		return
	}

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetProjectsProjectID(w, r, projectID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PatchProjectsProjectID operation middleware
func (siw *ServerInterfaceWrapper) PatchProjectsProjectID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "projectID" -------------
	var projectID string

	if err := runtime.BindStyledParameter("simple", false, "projectID", chi.URLParam(r, "projectID"), &projectID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "projectID"})
		return
	}

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PatchProjectsProjectID(w, r, projectID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetProjectsProjectIDTasks operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIDTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "projectID" -------------
	var projectID string

	if err := runtime.BindStyledParameter("simple", false, "projectID", chi.URLParam(r, "projectID"), &projectID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "projectID"})
		return
	}

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetProjectsProjectIDTasks(w, r, projectID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetTasks(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostTasks operation middleware
func (siw *ServerInterfaceWrapper) PostTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostTasks(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteTasksTaskID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTasksTaskID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "taskID" -------------
	var taskID string

	if err := runtime.BindStyledParameter("simple", false, "taskID", chi.URLParam(r, "taskID"), &taskID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "taskID"})
		return
	}

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteTasksTaskID(w, r, taskID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetTasksTaskID operation middleware
func (siw *ServerInterfaceWrapper) GetTasksTaskID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "taskID" -------------
	var taskID string

	if err := runtime.BindStyledParameter("simple", false, "taskID", chi.URLParam(r, "taskID"), &taskID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "taskID"})
		return
	}

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetTasksTaskID(w, r, taskID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PatchTasksTaskIDStatus operation middleware
func (siw *ServerInterfaceWrapper) PatchTasksTaskIDStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "taskID" -------------
	var taskID string

	if err := runtime.BindStyledParameter("simple", false, "taskID", chi.URLParam(r, "taskID"), &taskID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "taskID"})
		return
	}

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PatchTasksTaskIDStatus(w, r, taskID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/projects", wrapper.GetProjects)
		r.Post("/projects", wrapper.PostProjects)
		r.Delete("/projects/{projectID}", wrapper.DeleteProjectsProjectID)
		r.Get("/projects/{projectID}", wrapper.GetProjectsProjectID)
		r.Patch("/projects/{projectID}", wrapper.PatchProjectsProjectID)
		r.Get("/projects/{projectID}/tasks", wrapper.GetProjectsProjectIDTasks)
		r.Get("/tasks", wrapper.GetTasks)
		r.Post("/tasks", wrapper.PostTasks)
		r.Delete("/tasks/{taskID}", wrapper.DeleteTasksTaskID)
		r.Get("/tasks/{taskID}", wrapper.GetTasksTaskID)
		r.Patch("/tasks/{taskID}/status", wrapper.PatchTasksTaskIDStatus)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"H4sIAAAAAAAC/8xYwY7bNhD9FYItkIu6dppcqptbA4WBtjDS7SnIgSuNbGYlUiFHSQ1D/15wKMqyJVu2",
	"d+30ZovUDPnezOMTtzzRRakVKLQ83nKbrKEQ9HNp9GdI0P0sjS7BoAQaSAwIhHRGQynYxMgSpVY85o9r",
	"YDQstWKpQGA6Y7gGVvpgDzzimTaFQB5zN/4TygJ4xHFTAo+5RSPVitcRl2k/+j9KfqmAyRQUykyCYZk2",
	"R8NXlUyHIitRQD/2X6IYWuzB23X7RD8ROHXEH4V9fh2QUNjnWyHUi309PCFU79VSGFDo8FjM+yEW8xZf",
	"mkdxIiYzJpHBv9KiPWuBDTsjKfykdr3sCXKtVpahPiuJRYGVPcJdZWj9fs4hKqCqgscfeQkqdcEi6rAc",
	"EFL+aShT9YSE2EC2GculxZBhMbd7dL6xrHmZgJMIBcUY3VzzQBgjNkM17R5JlemhBaFOtV/VbLlguBbI",
	"CqHECmzA3DKhUlqgZd8krvcWiRJzl+pRpzpBKRSP+Fcw1od/+zB9mLoV6hKUKCWP+buH6cM77moL17S7",
	"SUjj/qxgoL8+ABoJX4GJFj6R5+3y3DJcp1L/LVIe898BlyFoxA3YUivr2/jn6ZS6WSsERblEWeYyoZcn",
	"n61LGFTT/WpJ+NFAxmP+w2Snr5NGXCdBWftU1NHBXv4Y3EBNdVMUwmz88vfGqUm0HUBmlqZMMAXfdv2h",
	"fTkFVvvgLLXdR+dLBRZ/1enmImDOwsPtyyWQBlIeo6mg7vHx9jZp94Fqhlij4sxWSQLWZlWebw7h/43m",
	"MLE7Ntx4W6aTbStYtWfEacFQ1Rb6aycMdZFE23RSZnQxRtWcQgeylq1OkjKLAhCM5fHHLZcuoesoHvS+",
	"o6qHFEQdOEekpf7Uo+t9f6cBXI9ED9yIvz/1ltLIMl2p9JAHv/sOD2yWW91ksd1T4U0DKiUbk5BAx9OG",
	"2FjMT+rHCdD7B0nvuCIZvx8303u00oxZqVZ5Z49XM0xCdxDO+w5M1gNmqCRzJZR3F1KtOgXgoB0QOxfp",
	"uzfQdQq77z+HbZyrOif/bnTIPI/a3XMUenpPha6I5JeIiJv6y4mpDippmcgNiHTDUDyDOqzMD0DTxK4q",
	"jx0BE1KeS72LPwO8h3V1jJoJloBBIVWXv3FdeqT03/NEuIGhok+wC9zUsbPgBbK081+diK4Irud7kNDA",
	"3/8H1NnQyocR8licYU/pk42KPBy/Up1jVHfovL5L9Xjc16Luch7ouMPniDlty/imKxjtitYWBz67/TDZ",
	"+m/e8xwxVcP5BpiKoLmFOEfoMEy9se8l0i4zvfTKuONt4B03s/4q5KSTPYneKQ8bLkDuhfD05jXeWtcW",
	"3ytI2jOtR/tgsrtwOuJm/xTmOTAoLGsvlZg27n9z3XTE0nZI/dsnumdjvIaf3eFz2QXbCyzsAMvNld9l",
	"pvN0fYSvlPZKj1K4WXX9XwAAAP//w06DkZ4XAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
